{"version":3,"sources":["Components/Title.js","Components/Form.js","Components/Todos.js","Components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Component","Form","onSubmit","this","props","showTodos","onChange","updateList","value","taskName","type","placeholder","Todos","_this","Fragment","tasks","map","elem","index","key","ident","onClick","changeText","identtext","deleteTask","Menu","counterTasks","taskText","deleteAllTasks","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","showAllTasks","ev","preventDefault","copyOfTaskTest","length","setState","concat","toConsumableArray","target","buttonIndex","getAttribute","assign","splice","document","querySelectorAll","classList","toggle","console","log","Components_Title","Components_Form","bind","Components_Menu","Components_Todos","taskNum","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81b05138.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nclass Title extends Component{\r\n  render(){\r\n    return(\r\n      <h2 className=\"display-3 text-center my-3\">todos</h2>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React, {Component} from \"react\";\r\n\r\nclass Form extends Component{\r\n   render(){\r\n     return(\r\n      <form onSubmit={this.props.showTodos}>\r\n       <div className=\"input-group mb-3\">\r\n          <input onChange={this.props.updateList} value={this.props.taskName} type=\"text\" className=\"form-control\" placeholder=\"Type here a task\" />\r\n          <div className=\"input-group-append\">\r\n            <button className=\"btn btn-success px-4\">Enter</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n     )\r\n   }\r\n}\r\n\r\nexport default Form;\r\n","import React, {Component} from \"react\";\r\n\r\nclass Todos extends Component{\r\n  render(){\r\n    return(\r\n       <>\r\n         <div className=\"d-flex flex-column\">\r\n            {this.props.tasks.map((elem, index) => {\r\n               return(\r\n              <React.Fragment key={index} >\r\n                 <div className=\"d-flex\">\r\n                      <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text bg-white border-0 sizeBox\">\r\n                          <span className=\"mr-3\">Task #{index +1}</span>\r\n                          <input ident={index} onClick={this.props.changeText} className=\"\" type=\"checkbox\" />\r\n                        </div>\r\n                      </div>\r\n                      <span identtext={index} className=\"taskBox border-0 bg-white input-group-text\">{elem}</span>\r\n                      <span ident={index} onClick={this.props.deleteTask} className=\"float-right deleteButton mx-3\">&times;</span>\r\n                </div>\r\n               <hr className=\"hrTask\"/>\r\n              </React.Fragment>\r\n               )\r\n            })}\r\n         </div>\r\n       </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Todos;\r\n","import React, {Component} from \"react\";\r\n\r\nclass Menu extends Component{\r\n   render(){\r\n     return(\r\n       <div className=\"d-flex align-items-center my-3\">\r\n         <span className=\"tasks mx-3\">{this.props.counterTasks} {this.props.taskText}</span>\r\n         <button onClick={this.props.deleteAllTasks} className=\"btn border border-secondary \">Delete all tasks</button>\r\n       </div>\r\n     )\r\n   }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Title from \"./Components/Title\";\nimport Form from \"./Components/Form\";\nimport Todos from \"./Components/Todos\";\nimport Menu from \"./Components/Menu\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {taskName: \"\",\n                  tasks: [],\n                  counterTasks: 0,\n                  showAllTasks: false,\n                  taskText: \"tasks\"}\n  }\n\n  showTodos(ev){\n    ev.preventDefault();\n\n    if(!this.state.taskName){\n      this.setState({showAllTasks: false})\n    }\n    else{\n\n      let copyOfTaskTest = this.state.taskText;\n      if(this.state.tasks.length < 1){\n        copyOfTaskTest = \"task\";\n      }\n      else{\n        copyOfTaskTest = \"tasks\";\n      }\n\n      this.setState({\n        showAllTasks: true,\n        tasks:[...this.state.tasks,\n        this.state.taskName ],\n        taskName: \"\",\n        taskText: copyOfTaskTest,\n        counterTasks: this.state.counterTasks +1\n      })\n    }\n\n  }\n\n  updateList(ev){\n    this.setState({\n       taskName: ev.target.value\n    })\n  }\n\n  deleteTask(ev){\n    let buttonIndex = ev.target.getAttribute(\"ident\");\n    let deleteTask = Object.assign([], this.state.tasks);\n    deleteTask.splice(buttonIndex, 1);\n\n    this.setState({\n      tasks: deleteTask,\n      counterTasks: this.state.counterTasks -1,\n    })\n  }\n\n  changeText(ev){\n    let buttonIndex = ev.target.getAttribute(\"ident\");\n    let elemText = document.querySelectorAll(\".taskBox\");\n    elemText[buttonIndex].classList.toggle(\"textLineThrough\");\n  }\n\n  deleteAllTasks(){\n     this.setState({\n       tasks: [],\n       counterTasks: 0})\n  }\n\n  render() {\n   console.log(this.state.tasks);\n    return (\n      <>\n        <Title />\n        <div className=\"container mx-auto\">\n          <Form showTodos={this.showTodos.bind(this)}\n                updateList={this.updateList.bind(this)}\n                taskName={this.state.taskName}\n                  />\n        {this.state.showAllTasks  && <div className=\"d-flex flex-column bg-white m-0\">\n               {this.state.tasks.length > 0 && <Menu\n                                                  counterTasks={this.state.counterTasks}\n                                                  deleteAllTasks={this.deleteAllTasks.bind(this)}\n                                                  taskText={this.state.taskText} />}\n               <Todos tasks={this.state.tasks}\n                      deleteTask={this.deleteTask.bind(this)}\n                      taskNum={this.state.taskNum}\n                      changeText={this.changeText.bind(this)}\n                />\n            </div>\n        }\n        </div>\n    </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}